name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test-unixlike-gcc:
    name: Build and test
    runs-on: ubuntu-latest
    container: lhamowski/devops:ubuntu-24.04-cpp-gcc-14-boost-1.87-latest
    strategy:
      matrix:
        preset: [unixlike-gcc-release, unixlike-gcc-asan, unixlike-gcc-tsan, unixlike-gcc-ubsan]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure
        run: cmake --preset=${{ matrix.preset }}

      - name: Build
        run: cmake --build build/${{ matrix.preset }}

      - name: Run tests
        run: cd build/${{ matrix.preset }} && ctest -VV --output-on-failure

  build-and-test-windows-msvc-release:
    name: Build and test (windows-msvc-release)
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          vsversion: "2022"

      - name: Configure
        run: cmake --preset=windows-msvc-release

      - name: Build
        run: cmake --build build/windows-msvc-release

      - name: Run tests
        run: cd build/windows-msvc-release && ctest -VV --output-on-failure

  build-and-test-unixlike-clang-coverage:
    name: Build, test and generate coverage report (unixlike-clang-coverage)
    runs-on: ubuntu-latest
    container: lhamowski/devops:ubuntu-24.04-cpp-clang-18-boost-1.87-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure
        run: cmake --preset=unixlike-clang-coverage

      - name: Build
        run: cmake --build build/unixlike-clang-coverage

      - name: Run tests and generate coverage report
        run: |
          cd build/unixlike-clang-coverage
          echo "=== Running tests with coverage ==="
          LLVM_PROFILE_FILE=coverage-%p.profraw ctest -VV --output-on-failure
          echo "=== Profile files in test directory ==="
          ls -la test/*.profraw || echo "No .profraw files found in test/"
          echo "=== Merging profile files ==="
          llvm-profdata-18 merge --sparse test/*.profraw -o coverage.profdata
          echo "=== Generating coverage report ==="
          find ./src -name '*.o' | xargs -I{} echo "-object={}" > object_list.txt
          llvm-cov-18 export ./test/lux-test \
              -instr-profile=coverage.profdata \
              -format=lcov \
              -ignore-filename-regex=".*test/.*" \
              $(cat object_list.txt) \
              > coverage.info

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: build/unixlike-clang-coverage/coverage.info
          flags: unittests
          name: lux-coverage
          token: ${{ secrets.CODECOV_TOKEN }}